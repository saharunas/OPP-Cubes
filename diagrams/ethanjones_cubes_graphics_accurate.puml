@startuml Graphics_System
!theme plain
title Graphics System

    class CubesModelBatch {
        -camera : Camera
        ~{readonly} translation1 : Vector3
        ~{readonly} translation2 : Vector3
        ~{readonly} dst : float
        ~{readonly} b1 : boolean
        ~{readonly} b2 : boolean
        ~{readonly} dst : float
        ~{readonly} result : int
        ~renderable : Renderable
        ~field : Field
        --
        ~Vector3() : new
        ~Vector3() : new
        ~sort(camera : Camera, renderables : Array<Renderable>) : Override public void
        ~compare(o1 : Renderable, o2 : Renderable) : Override public int
        ~if(o2.material : o1.material ==) : void
        ~newObject() : Override protected Renderable
        ~CubesRenderable() : return new
        ~obtain() : Override public Renderable
        ~IllegalStateException() : throw new
        ~reset(object : Renderable) : Override protected void
        ~flush() : void
        ~free(object : Renderable) : Override public void
        ~UnsupportedOperationException() : throw new
        ~freeAll(objects : Array<Renderable>) : Override public void
        ~UnsupportedOperationException() : throw new
        +... (more methods)
    }
    class CubesRenderableSorter {
        -camera : Camera
        ~{readonly} translation1 : Vector3
        ~{readonly} translation2 : Vector3
        ~{readonly} dst : float
        ~{readonly} b1 : boolean
        ~{readonly} b2 : boolean
        ~{readonly} dst : float
        ~{readonly} result : int
        --
        ~Vector3() : new
        ~Vector3() : new
        ~sort(camera : Camera, renderables : Array<Renderable>) : Override public void
        ~compare(o1 : Renderable, o2 : Renderable) : Override public int
        ~if(o2.material : o1.material ==) : void
    }
    class CubesRenderablePool {
        ~renderable : Renderable
        --
        ~newObject() : Override protected Renderable
        ~CubesRenderable() : return new
        ~obtain() : Override public Renderable
        ~IllegalStateException() : throw new
        ~reset(object : Renderable) : Override protected void
        ~flush() : void
        ~free(object : Renderable) : Override public void
        ~UnsupportedOperationException() : throw new
        ~freeAll(objects : Array<Renderable>) : Override public void
        ~UnsupportedOperationException() : throw new
    }
    class CubesRenderable {
        +name : String
        #lightOverride : int
        #fogEnabled : boolean
        ~this : return
        ~this : return
        ~this : return
        --
        ~setLightOverride(position : Vector3) : public CubesRenderable
        ~setLightOverride(value : int) : public CubesRenderable
        ~setFogEnabled(value : boolean) : public CubesRenderable
        ~reset() : public CubesRenderable
    }
    class CubesShaderProvider {
        ~{readonly} DEFAULT_VERTEX_SHADER : String
        ~{readonly} DEFAULT_FRAGMENT_SHADER : String
        ~{readonly} FEATURE_FOG : int
        ~{readonly} FEATURE_AO : int
        ~{readonly} MAX_FEATURE_FLAG : int
        ~{readonly} COMBINATIONS : int
        ~{readonly} shaders : CubesShader[]
        ~shader : int
        ~fogFlag : boolean
        ~aoFlag : boolean
        ~f : ArrayList<Feature>
        ~program : ShaderProgram
        #u_sunlight : int
        #u_lightoverride : int
        -lightoverride : boolean
        ~stringBuilder : StringBuilder
        ~type : Application.ApplicationType
        ~config : Config
        ~config : return
        ~other : return
        +... (more fields)
        --
        ~getSetting() : public static Setting
        ~BooleanSetting() : return new
        ~shouldDisplay() : Override public boolean
        ~onChange() : Override public void
        ~for() : void
        ~getShader(renderable : Renderable) : Override public Shader
        ~if(null : renderable.shader !=) : void
        ~if(null : shaders[shader] ==) : void
        ~if(0 : shader ==) : void
        ~CubesShader() : new
        ~FeatureShader() : new
        ~CubesException(shader" : "Failed to compile) : throw new
        ~dispose() : Override public void
        ~for() : void
        ~if(null : shaders[i] !=) : void
        +... (more methods)
    }
    class CubesShader {
        #u_sunlight : int
        #u_lightoverride : int
        -lightoverride : boolean
        ~stringBuilder : StringBuilder
        ~type : Application.ApplicationType
        ~config : Config
        ~config : return
        ~other : return
        ~true : return
        --
        ~this() : void
        ~getGlobalPrefix() : private static String
        ~StringBuilder() : new
        ~getConfig() : private static Config
        ~Config() : new
        ~init() : Override public void
        ~render(renderable : Renderable) : Override public void
        ~if() : else
        ~CubesException(renderable" : "Error during rendering) : throw new
        ~begin(camera : Camera, context : RenderContext) : Override public void
        ~compareTo(other : Shader) : Override public int
        ~canRender(instance : Renderable) : Override public boolean
    }
    class FeatureShader {
        ~{readonly} features : List<Feature>
        ~prefix : StringBuilder
        --
        ~init() : Override public void
        ~for(features : Feature feature :) : void
        ~begin(camera : Camera, context : RenderContext) : Override public void
        ~for(features : Feature feature :) : void
        ~makePrefix(features : List<Feature>) : private static String
        ~StringBuilder() : new
        ~for(features : Feature feature :) : void
    }
    interface Feature {
        ~prefix() : String
        ~init(program : ShaderProgram) : void
        ~begin(program : ShaderProgram, camera : Camera, context : RenderContext) : void
    }
    class FogFeature {
        -u_cameraposition : int
        -u_skycolor : int
        -u_fogdistance : int
        -u_minfogdistance : int
        ~worldClient : WorldClient
        ~distance : float
        ~fogDistance : float
        --
        ~prefix() : Override public String
        ~init(program : ShaderProgram) : Override public void
        ~begin(program : ShaderProgram, camera : Camera, context : RenderContext) : Override public void
    }
    class AmbientOcclusionFeature {
        -ao_unit : int
        -u_aoTexture : int
        -u_aoUVTransform : int
        -u_aoStrength : int
        ~textureAttribute : TextureAttribute
        --
        ~prefix() : Override public String
        ~init(program : ShaderProgram) : Override public void
        ~begin(program : ShaderProgram, camera : Camera, context : RenderContext) : Override public void
    }
    class CubesVertexAttributes {
        ~{readonly} VERTEX_ATTRIBUTES : VertexAttributes
        ~{readonly} VERTEX_ATTRIBUTES_AO : VertexAttributes
        ~vertexAttributes : VertexAttribute[]
        ~vertexAttributesAO : VertexAttribute[]
        ~{readonly} COMPONENTS : int
        ~{readonly} COMPONENTS_AO : int
        ~{readonly} MAX_COMPONENTS : int
        ~VERTEX_ATTRIBUTES : return
        ~components : int
        ~components : return
        --
        ~VertexAttribute() : new
        ~VertexAttribute("0" : ShaderProgram.TEXCOORD_ATTRIBUTE +) : new
        ~VertexAttribute() : new
        ~VertexAttributes() : new
        ~VertexAttribute() : new
        ~VertexAttribute("0" : ShaderProgram.TEXCOORD_ATTRIBUTE +) : new
        ~VertexAttribute() : new
        ~VertexAttribute() : new
        ~VertexAttributes() : new
        ~getVertexAttributes() : public static VertexAttributes
        ~components(v : VertexAttributes) : public static int
        ~for(v : VertexAttribute attribute :) : void
    }
    class Graphics {
        ~{static} spriteBatch : SpriteBatch
        ~{static} screenViewport : ScreenViewport
        ~{static} modelBatch : ModelBatch
        ~{static} glProfiler : GLProfiler
        ~{static} GUI_WIDTH : float
        ~{static} GUI_HEIGHT : float
        ~{static} RENDER_WIDTH : int
        ~{static} RENDER_HEIGHT : int
        ~{static} init : boolean
        ~{static} oldScaleFactor : float
        ~scaleFactor : float
        ~temporary : boolean
        ~f : float
        ~{readonly} newScaleFactor : float
        ~{readonly} oldScaleFactor : float
        ~{readonly} temporary : boolean
        --
        ~SpriteBatch() : new
        ~ScreenViewport() : new
        ~init() : public static void
        ~CubesModelBatch() : new
        ~GLProfiler() : new
        ~resize(width : int, height : int) : public static void
        ~if(oldScaleFactor : scaleFactor !=) : void
        ~scaleFactor() : public static float
        ~ScaleFactorChangedEvent(newScaleFactor : float, oldScaleFactor : float, temporary : boolean) : public
        ~super() : void
    }
    class ScaleFactorChangedEvent {
        ~{readonly} newScaleFactor : float
        ~{readonly} oldScaleFactor : float
        ~{readonly} temporary : boolean
        --
        ~super() : void
    }
    class Screenshot {
        ~{readonly} takingScreenshot : AtomicReference<ScreenshotMethod>
        ~{readonly} resolutions : String[]
        ~{readonly} resolutionMap : HashMap<String, int[]>
        ~intBuffer : IntBuffer
        ~maxWidth : int
        ~maxHeight : int
        ~resolution : int[]
        ~setting : String
        ~method : ScreenshotMethod
        ~method : ScreenshotMethod
        ~dir : FileHandle
        ~{readonly} f : FileHandle
        ~start : long
        ~writer : PixmapIO.PNG
        ~pixmap : Pixmap
        ~state : AtomicInteger
        ~screenshotWidth : int
        ~screenshotHeight : int
        ~oldWidth : int
        ~oldHeight : int
        +... (more fields)
        --
        ~screenshotResolutionSetting() : public static Setting
        ~DropDownSetting() : return new
        ~onChange() : Override public void
        ~shouldDisplay() : Override public boolean
        ~startScreenshot() : public static void
        ~HighResolutionScreenshot() : new
        ~endScreenshot() : public static void
        ~writeScreenshot(pixmap : Pixmap) : private static void
        ~Runnable() : new
        ~run() : Override public void
        ~CubesException(f : "Error writing PNG: " +) : throw new
        ~frameStart() : void
        ~frameEnd() : void
        ~frameStart() : Override public void
        ~frameEnd() : Override public void
        +... (more methods)
    }
    interface ScreenshotMethod {
        ~frameStart() : void
        ~frameEnd() : void
    }
    ModelBatch <|-- CubesModelBatch
    RenderableSorter <|.. CubesRenderableSorter
    Comparator<Renderable> <|.. CubesRenderableSorter
    RenderablePool <|-- CubesRenderablePool
    Renderable <|-- CubesRenderable
    ShaderProvider <|.. CubesShaderProvider
    DefaultShader <|-- CubesShader
    CubesShader <|-- FeatureShader
    Feature <|.. FogFeature
    Feature <|.. AmbientOcclusionFeature
    Event <|-- ScaleFactorChangedEvent
@enduml
