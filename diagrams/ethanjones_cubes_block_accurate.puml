@startuml Block_System
!theme plain
title Block System

    class Block {
        ~{readonly} ONE_ZERO : int[]
        +id : String
        +intID : int
        #itemBlock : ItemBlock
        #textureHandlers : BlockTextureHandler[]
        #miningTime : float
        #miningTool : ItemTool.ToolType
        #miningToolLevel : int
        #miningOther : boolean
        ~itemBlock : return
        ~s : String
        ~0 : return
        ~false : return
        ~ONE_ZERO : return
        ~id : return
        ~itemTool : ItemTool
        ~miningTime : return
        ~itemTool : ItemTool
        ~false : return
        ~null : return
        +... (more fields)
        --
        ~IllegalArgumentException(format" : id + " is not in the correct) : throw new
        ~ItemBlock() : new
        ~loadGraphics() : public void
        ~getTextureHandler(meta : int) : public BlockTextureHandler
        ~getItemBlock() : public ItemBlock
        ~getName(meta : int) : public String
        ~getLightLevel(meta : int) : public int
        ~alwaysTransparent() : public boolean
        ~canBeTransparent() : public boolean
        ~alwaysTransparent() : return
        ~isTransparent(meta : int) : public boolean
        ~alwaysTransparent() : return
        ~displayMetaValues() : public int[]
        ~toString() : Override public String
        ~canMine(itemStack : ItemStack) : public boolean
        +... (more methods)
    }
    class BlockJson {
        ~id : String
        ~meta : int
        ~block : JBlock
        ~prop : JsonValue
        ~array : JsonArray
        ~ints : int[]
        ~ints : int[]
        ~object : JsonObject
        ~j : JsonValue
        ~jsonObject : JsonObject
        ~defaultT : T
        ~s : String
        ~m : int
        ~t : return
        ~JBlock : return b instanceof
        #lightLevel : Integer[]
        #transparent : Boolean[]
        #textures : String[][]
        #drops : ItemStackPlaceholder[][]
        #displayMeta : int[]
        +... (more fields)
        --
        ~json(json : JsonArray) : public static void
        ~for(json : JsonValue value :) : void
        ~addBlock(json : JsonObject) : public static void
        ~JsonException(id" : "No block) : throw new
        ~JBlock() : new
        ~if(null : prop !=) : void
        ~for() : void
        ~for() : void
        ~if(null : prop !=) : void
        ~for(object : JsonObject.Member member :) : void
        ~for(json : JsonObject.Member member :) : void
        ~parseMetaElement(json : JsonObject, name : String, t : T[], parser : MetaElementParser<T>) : private static <T> T[]
        ~for(jsonObject : Member member :) : void
        ~for() : void
        ~if(null : t[i] ==) : void
        +... (more methods)
    }
    class JBlock {
        #lightLevel : Integer[]
        #transparent : Boolean[]
        #textures : String[][]
        #drops : ItemStackPlaceholder[][]
        #displayMeta : int[]
        ~{readonly} meta : int
        -canBeTransparent : boolean
        -alwaysTransparent : boolean
        ~lightLevel : return
        ~canBeTransparent : return
        ~alwaysTransparent : return
        ~transparent : return
        ~displayMeta : return
        ~itemStacks : ItemStack[]
        ~itemStacks : return
        --
        ~super() : void
        ~jsonFinish() : private void
        ~if(null : transparent !=) : void
        ~for(transparent : Boolean b :) : void
        ~if() : void
        ~loadGraphics() : Override public void
        ~if(null : textures ==) : void
        ~for() : void
        ~BlockTextureHandler() : new
        ~if(6 : textures[m].length ==) : void
        ~for() : void
        ~CubesException("\"" : "Invalid JBlock.textures length for id \"" + id +) : throw new
        ~getLightLevel(meta : int) : Override public int
        ~canBeTransparent() : Override public boolean
        ~alwaysTransparent() : Override public boolean
        +... (more methods)
    }
    interface MetaElementParser {
        ~parse(prop : JsonValue) : E
    }
    class ItemStackPlaceholder {
        ~{readonly} id : String
        ~{readonly} count : int
        ~{readonly} meta : int
        ~item : Item
        --
        ~convertToItemStack() : private ItemStack
        ~JsonException("'" : "Invalid id: '" + id +) : throw new
        ~ItemStack() : return new
    }
    class Blocks {
        ~{static} bedrock : Block
        ~{static} stone : Block
        ~{static} dirt : Block
        ~{static} grass : Block
        ~{static} log : Block
        ~{static} leaves : Block
        ~{static} glow : Block
        ~{static} glass : Block
        ~{static} chest : Block
        ~{static} sapling : Block
        --
        ~init() : public static void
        ~BlockDirt() : new
        ~BlockGrass() : new
        ~BlockLeaves() : new
        ~BlockGlass() : new
        ~BlockChest() : new
        ~BlockSapling() : new
    }
    class BlockChest {
        ~{readonly} lockFace : BlockFace[]
        ~true : return
        ~blockData : BlockData
        ~inventoryActor : InventoryActor
        ~playerInv : InventoryActor
        ~true : return
        ~pos : Vector3
        ~blockFace : BlockFace
        ~1 : return
        ~2 : return
        ~3 : return
        ~0 : return
        --
        ~super() : void
        ~loadGraphics() : Override public void
        ~for() : void
        ~BlockTextureHandler() : new
        ~blockData() : Override public boolean
        ~createBlockData(area : Area, x : int, y : int, z : int, meta : int, dataGroup : DataGroup) : Override public BlockData
        ~BlockDataChest() : return new
        ~onButtonPress(type : ClickType, player : Player, blockX : int, blockY : int, blockZ : int) : Override public boolean
        ~if(BlockDataChest : blockData instanceof) : void
        ~place(world : World, x : int, y : int, z : int, meta : int, player : Player, intersection : BlockIntersection) : Override public Integer
        ~if(BlockFace.negX : blockFace ==) : void
        ~if(BlockFace.posZ : blockFace ==) : else
        ~if(BlockFace.negZ : blockFace ==) : else
        ~drops(world : World, x : int, y : int, z : int, meta : int) : Override public ItemStack[]
    }
    class BlockDirt {
        ~a : Area
        ~bX : int
        ~bZ : int
        ~false : return
        --
        ~super() : void
        ~randomTick(world : World, area : Area, x : int, y : int, z : int, meta : int) : Override public void
        ~for() : void
        ~checkForGrass(world : World, area : Area, x : int, y : int, z : int) : private boolean
        ~if(Area.SIZE_BLOCKS : x < 0 || x >= Area.SIZE_BLOCKS || z < 0 || z >=) : void
        ~if(null : a !=) : void
    }
    class BlockGlass {
        ~true : return
        --
        ~super() : void
        ~renderFace(blockFace : BlockFace, neighbourIDAndMeta : int) : Override public boolean
        ~alwaysTransparent() : Override public boolean
    }
    class BlockGrass {
        ~{readonly} MIN_LIGHT : int
        ~handler : BlockTextureHandler
        --
        ~super() : void
        ~loadGraphics() : Override public void
        ~BlockTextureHandler() : new
        ~drops(world : World, x : int, y : int, z : int, meta : int) : Override public ItemStack[]
        ~randomTick(world : World, area : Area, x : int, y : int, z : int, meta : int) : Override public void
    }
    class BlockLeaves {
        ~{readonly} randomTickChecked : boolean[]
        ~{readonly} randomTickTodo : IntQueue
        ~true : return
        ~poll : int
        ~cx : int
        ~x : int
        ~a : Area
        ~b : Block
        ~pos : int
        ~random : ThreadRandom
        ~sapling : boolean
        ~leaves : boolean
        --
        ~IntQueue(9 : 9 * 9 *) : new
        ~super() : void
        ~alwaysTransparent() : Override public boolean
        ~randomTick(world : World, area : Area, blockX : int, blockY : int, blockZ : int, meta : int) : Override public void
        ~if(1 : meta ==) : void
        ~add() : void
        ~if(Area.SIZE_BLOCKS : x < 0 || x >= Area.SIZE_BLOCKS || z < 0 || z >=) : void
        ~if(Blocks.leaves : b ==) : void
        ~add(-1 : cx +) : void
        ~add(1 : cx +) : void
        ~add(-1 : cy +) : void
        ~add(1 : cy +) : void
        ~add(-1 : cz +) : void
        ~add(1 : cz +) : void
        ~if(Blocks.log : b ==) : else
        +... (more methods)
    }
    class BlockSapling {
        ~true : return
        ~under : Block
        ~null : return
        --
        ~super() : void
        ~renderType(meta : int) : Override public BlockRenderType
        ~alwaysTransparent() : Override public boolean
        ~randomTick(world : World, area : Area, x : int, y : int, z : int, meta : int) : Override public void
        ~if() : void
        ~place(world : World, x : int, y : int, z : int, meta : int, player : Player, intersection : BlockIntersection) : Override public Integer
        ~if(Blocks.dirt : under == Blocks.grass || under ==) : void
    }
    Block <|-- JBlock
    Block <|-- BlockChest
    Block <|-- BlockDirt
    Block <|-- BlockGlass
    Block <|-- BlockGrass
    Block <|-- BlockLeaves
    Block <|-- BlockSapling
@enduml
