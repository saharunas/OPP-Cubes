@startuml Networking System - OPP Cubes
!theme plain
title Networking System - Client/Server Communication

package "Core Networking" {
    abstract class Networking {
        +side : Side
        +connected : boolean
        --
        +{abstract} update() : void
        +{abstract} processPackets() : void
        +{abstract} sendPacket(packet : Packet) : void
        +{abstract} dispose() : void
        +isConnected() : boolean
    }

    class NetworkingManager {
        -{static} clientNetworking : ClientNetworking
        -{static} serverNetworking : ServerNetworking
        --
        +{static} clientInit() : void
        +{static} serverInit() : void
        +{static} getNetworking(side : Side) : Networking
        +{static} sendPacket(packet : Packet, side : Side) : void
    }
}

package "Client Networking" {
    class ClientNetworking {
        +socket : Socket
        +socketIO : SocketIO
        +packetQueue : PacketQueue
        +serverConnection : boolean
        --
        +connect(address : String, port : int) : boolean
        +disconnect() : void
        +update() : void
        +processPackets() : void
        +sendPacket(packet : Packet) : void
    }

    class ClientConnectionInitializer {
        +address : String
        +port : int
        +timeout : int
        --
        +initialize() : Socket
        +handshake(socket : Socket) : boolean
    }

    class ClientNetworkingParameter {
        +address : String
        +port : int
        +playerName : String
        +uuid : UUID
        --
        +validate() : boolean
    }

    class PingResult {
        +address : String
        +port : int
        +ping : long
        +playerCount : int
        +maxPlayers : int
        +motd : String
        --
        +isValid() : boolean
    }
}

package "Server Networking" {
    class ServerNetworking {
        +serverSocket : ServerSocket
        +clients : Map<ClientIdentifier, SocketIO>
        +packetQueue : PriorityPacketQueue
        +socketMonitor : ServerSocketMonitor
        --
        +start(port : int) : boolean
        +stop() : void
        +update() : void
        +processPackets() : void
        +sendPacket(packet : Packet) : void
        +sendPacketToClient(packet : Packet, client : ClientIdentifier) : void
        +sendPacketToAll(packet : Packet) : void
    }

    class ServerConnectionInitializer {
        +serverSocket : ServerSocket
        --
        +acceptConnection() : Socket
        +handshakeClient(socket : Socket) : ClientIdentifier
    }

    class ClientIdentifier {
        +uuid : UUID
        +name : String
        +address : InetAddress
        +connectionTime : long
        --
        +equals(obj : Object) : boolean
        +hashCode() : int
        +toString() : String
    }

    class ServerSocketMonitor {
        +serverNetworking : ServerNetworking
        +running : boolean
        --
        +start() : void
        +stop() : void
        +run() : void
    }

    class ServerNetworkingParameter {
        +port : int
        +maxPlayers : int
        +motd : String
        --
        +validate() : boolean
    }
}

package "Singleplayer Networking" {
    class SingleplayerNetworking {
        +clientSide : SingleplayerNetworkingThread
        +serverSide : SingleplayerNetworkingThread
        +clientToServer : PairedStreams
        +serverToClient : PairedStreams
        --
        +init() : void
        +update() : void
        +processPackets() : void
        +sendPacket(packet : Packet) : void
    }

    class SingleplayerNetworkingThread {
        +side : Side
        +input : DataInputStream
        +output : DataOutputStream
        +packetQueue : PacketQueue
        --
        +start() : void
        +stop() : void
        +run() : void
        +sendPacket(packet : Packet) : void
    }
}

package "Packet System" {
    abstract class Packet {
        +id : int
        +priority : PacketPriority
        +direction : PacketDirection
        --
        +{abstract} write(output : DataOutputStream) : void
        +{abstract} read(input : DataInputStream) : void
        +{abstract} handle(side : Side) : void
        +getID() : int
        +getPriority() : PacketPriority
        +getDirection() : PacketDirection
    }

    class DataPacket {
        +data : byte[]
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
        +setData(data : byte[]) : void
        +getData() : byte[]
    }

    enum PacketPriority {
        +LOW
        +NORMAL
        +HIGH
        +URGENT
        --
        +getValue() : int
    }

    enum PacketDirection {
        +CLIENT_TO_SERVER
        +SERVER_TO_CLIENT
        +BIDIRECTIONAL
        --
        +canSend(from : Side, to : Side) : boolean
    }

    class PacketIDDatabase {
        -{static} packetClasses : Map<Integer, Class<? extends Packet>>
        -{static} packetIDs : Map<Class<? extends Packet>, Integer>
        --
        +{static} registerPacket(id : int, clazz : Class<? extends Packet>) : void
        +{static} getPacketClass(id : int) : Class<? extends Packet>
        +{static} getPacketID(clazz : Class<? extends Packet>) : int
        +{static} createPacket(id : int) : Packet
    }

    class PacketQueue {
        -queue : Queue<Packet>
        -lock : ReentrantLock
        --
        +enqueue(packet : Packet) : void
        +dequeue() : Packet
        +isEmpty() : boolean
        +size() : int
        +clear() : void
    }

    class PriorityPacketQueue {
        -queue : PriorityBlockingQueue<Packet>
        --
        +enqueue(packet : Packet) : void
        +dequeue() : Packet
        +isEmpty() : boolean
        +size() : int
    }
}

package "Packet Implementations" {
    class PacketConnect {
        +playerName : String
        +uuid : UUID
        +version : String
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketConnected {
        +success : boolean
        +message : String
        +playerUUID : UUID
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketPlayerMovement {
        +playerUUID : UUID
        +position : Vector3
        +rotation : Vector2
        +velocity : Vector3
        +onGround : boolean
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketBlockChanged {
        +x : int
        +y : int
        +z : int
        +oldBlock : Block
        +newBlock : Block
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketArea {
        +areaX : int
        +areaZ : int
        +blocks : int[][][]
        +compressed : boolean
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
        +compress() : void
        +decompress() : void
    }

    class PacketChat {
        +senderUUID : UUID
        +message : String
        +timestamp : long
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketPingRequest {
        +timestamp : long
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketPingReply {
        +timestamp : long
        +serverTime : long
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketEntityUpdate {
        +entityUUID : UUID
        +position : Vector3
        +velocity : Vector3
        +health : float
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }

    class PacketWorldTime {
        +worldTime : long
        +dayTime : long
        --
        +write(output : DataOutputStream) : void
        +read(input : DataInputStream) : void
        +handle(side : Side) : void
    }
}

package "Socket System" {
    class SocketIO {
        +socket : Socket
        +input : SocketInput
        +output : SocketOutput
        +connected : boolean
        --
        +connect(address : String, port : int) : boolean
        +disconnect() : void
        +sendPacket(packet : Packet) : void
        +receivePacket() : Packet
        +isConnected() : boolean
    }

    class SocketInput {
        +inputStream : DataInputStream
        +buffer : ByteBuffer
        --
        +readPacket() : Packet
        +available() : int
        +close() : void
    }

    class SocketOutput {
        +outputStream : DataOutputStream
        +buffer : ByteBuffer
        --
        +writePacket(packet : Packet) : void
        +flush() : void
        +close() : void
    }

    abstract class SocketMonitor {
        #running : boolean
        #thread : Thread
        --
        +{abstract} run() : void
        +start() : void
        +stop() : void
        +isRunning() : boolean
    }
}

package "Stream System" {
    class PairedStreams {
        +inputStream : PipedInputStream
        +outputStream : PipedOutputStream
        +dataInput : NoCloseDataInputStream
        +dataOutput : NoCloseDataOutputStream
        --
        +create() : PairedStreams
        +getInputStream() : DataInputStream
        +getOutputStream() : DataOutputStream
        +close() : void
    }

    class NoCloseDataInputStream {
        +wrapped : DataInputStream
        --
        +close() : void
        +readInt() : int
        +readString() : String
    }

    class NoCloseDataOutputStream {
        +wrapped : DataOutputStream
        --
        +close() : void
        +writeInt(value : int) : void
        +writeString(value : String) : void
    }

    class DirectByteArrayOutputStream {
        +buffer : byte[]
        +count : int
        --
        +write(b : int) : void
        +toByteArray() : byte[]
        +reset() : void
        +size() : int
    }
}

' Relationships
Networking <|-- ClientNetworking
Networking <|-- ServerNetworking
Networking <|-- SingleplayerNetworking
NetworkingManager --> Networking : manages

ClientNetworking --> ClientConnectionInitializer : uses
ClientNetworking --> ClientNetworkingParameter : configured by
ClientNetworking --> SocketIO : uses
ClientNetworking --> PacketQueue : uses

ServerNetworking --> ServerConnectionInitializer : uses
ServerNetworking --> ServerSocketMonitor : uses
ServerNetworking --> ClientIdentifier : manages
ServerNetworking --> PriorityPacketQueue : uses
ServerSocketMonitor --> SocketMonitor : extends

SingleplayerNetworking --> SingleplayerNetworkingThread : contains
SingleplayerNetworking --> PairedStreams : uses
SingleplayerNetworkingThread --> PacketQueue : uses

Packet <|-- DataPacket
Packet <|-- PacketConnect
Packet <|-- PacketConnected
Packet <|-- PacketPlayerMovement
Packet <|-- PacketBlockChanged
Packet <|-- PacketArea
Packet <|-- PacketChat
Packet <|-- PacketPingRequest
Packet <|-- PacketPingReply
Packet <|-- PacketEntityUpdate
Packet <|-- PacketWorldTime

Packet --> PacketPriority : has
Packet --> PacketDirection : has
PacketIDDatabase --> Packet : creates
PacketQueue --> Packet : stores
PriorityPacketQueue --> Packet : stores

SocketIO --> SocketInput : uses
SocketIO --> SocketOutput : uses
SocketMonitor <|-- ServerSocketMonitor

PairedStreams --> NoCloseDataInputStream : uses
PairedStreams --> NoCloseDataOutputStream : uses

note right of Networking : "Abstract base for all\nnetworking implementations:\nclient, server, singleplayer"

note bottom of PacketIDDatabase : "Registry system for\npacket serialization\nand deserialization"

note left of SingleplayerNetworking : "Special networking for\nsingleplayer mode using\ninternal pipes instead of sockets"

note top of SocketIO : "Wraps socket communication\nwith packet-based protocol\nand automatic reconnection"

@enduml