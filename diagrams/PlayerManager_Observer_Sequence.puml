@startuml PlayerManager_Observer_Sequence

' Observer Pattern Sequence Diagram showing notification flow
' Based on actual implementation - observers are NOT created in PlayerManager

skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

actor Client as "Client\n(Remote Player)"
participant External as "External Code\n(Application)" #LightYellow
participant PM as "PlayerManager\n<<Subject>>" #LightBlue
participant NO as "NetworkObserver\n<<Observer>>" #PaleGreen
participant ALO as "AreaLoadObserver\n<<Observer>>" #PaleGreen
participant SO as "StatisticsObserver\n<<Observer>>" #PaleGreen
participant CO as "ChatObserver\n<<Observer>>" #PaleGreen
participant Network as "NetworkingManager"
participant World as "World"

== Observer Registration (External Setup) ==

note over External, CO
  **Note:** Observers are created and registered externally,
  NOT inside PlayerManager constructor.
  This sequence shows the notification flow once observers are registered.
end note

Client -> PM : new PlayerManager(client, packet)
activate PM

note over PM
  PlayerManager constructor:
  - Initializes state
  - Does NOT create observers
  - Observers list is empty initially
end note

PM --> Client : PlayerManager created
deactivate PM

|||

note over External, PM
  **Setup Phase:**
  External code now creates observers
  and registers them with PlayerManager
end note

|||

create NO
External -> NO : new NetworkObserver(client)
activate NO
NO --> External
deactivate NO

External -> PM : registerObserver(networkObserver)
activate PM
PM -> PM : observers.add(networkObserver)
PM --> External
deactivate PM

create ALO
External -> ALO : new AreaLoadObserver(client, loadDistance)
activate ALO
ALO --> External
deactivate ALO

External -> PM : registerObserver(areaLoadObserver)
activate PM
PM -> PM : observers.add(areaLoadObserver)
PM --> External
deactivate PM

create SO
External -> SO : new StatisticsObserver(client)
activate SO
SO --> External
deactivate SO

External -> PM : registerObserver(statisticsObserver)
activate PM
PM -> PM : observers.add(statisticsObserver)
PM --> External
deactivate PM

create CO
External -> CO : new ChatObserver(client, false)
activate CO
CO --> External
deactivate CO

External -> PM : registerObserver(chatObserver)
activate PM
PM -> PM : observers.add(chatObserver)
PM --> External
deactivate PM

note over PM
  Observers now registered.
  Ready to receive notifications.
end note

deactivate PM

== Player Movement Event ==

Client -> PM : handlePacket(PacketPlayerMovement)
activate PM

PM -> PM : setPosition(newPos, newAngle, true)
activate PM

note over PM
  1. Validate position
  2. Update player position
  3. Check area change
  4. Notify all observers
end note

' Position notification
PM -> PM : notifyPositionChanged(oldPos, newPos)
activate PM

PM -> NO : onPositionChanged(playerId, oldPos, newPos)
activate NO
note right of NO
  Broadcast position
  to other clients
end note
NO -> Network : sendPacketToOtherClients(packet)
activate Network
Network --> NO
deactivate Network
NO --> PM
deactivate NO

PM -> ALO : onPositionChanged(playerId, oldPos, newPos)
activate ALO
note right of ALO
  Check if player
  entered new area
end note
ALO -> ALO : Check area change
ALO --> PM
deactivate ALO

PM -> SO : onPositionChanged(playerId, oldPos, newPos)
activate SO
note right of SO
  Update statistics:
  - Movement count
  - Distance traveled
end note
SO -> SO : Update metrics
SO --> PM
deactivate SO

PM -> CO : onPositionChanged(playerId, oldPos, newPos)
activate CO
note right of CO
  Position changes
  too frequent for chat
  (do nothing)
end note
CO --> PM
deactivate CO

deactivate PM

' If area changed, notify again
alt Area Changed (newArea != oldArea)
    PM -> PM : notifyAreaChanged(oldArea, newArea)
    activate PM
    
    PM -> NO : onAreaChanged(playerId, oldArea, newArea)
    activate NO
    NO --> PM
    deactivate NO
    
    PM -> ALO : onAreaChanged(playerId, oldArea, newArea)
    activate ALO
    note right of ALO
      Load new chunks
      Send new entities
    end note
    ALO -> World : requestRegion(difference)
    activate World
    World --> ALO
    deactivate World
    ALO -> Network : sendPacketToClient(area packets)
    activate Network
    Network --> ALO
    deactivate Network
    ALO --> PM
    deactivate ALO
    
    PM -> SO : onAreaChanged(playerId, oldArea, newArea)
    activate SO
    SO -> SO : areaChangeCount++
    SO --> PM
    deactivate SO
    
    PM -> CO : onAreaChanged(playerId, oldArea, newArea)
    activate CO
    alt notifyAreaChanges == true
        CO -> Network : sendPacketToAllClients(chat message)
        activate Network
        Network --> CO
        deactivate Network
    end
    CO --> PM
    deactivate CO
    
    deactivate PM
end

deactivate PM
deactivate PM

== Player Disconnection ==

Client -> PM : disconnected()
activate PM

PM -> PM : notifyPlayerDisconnected()
activate PM

PM -> NO : onPlayerDisconnected(playerId)
activate NO
note right of NO
  Log disconnect event
end note
NO --> PM
deactivate NO

PM -> ALO : onPlayerDisconnected(playerId)
activate ALO
note right of ALO
  Cleanup area loading
end note
ALO --> PM
deactivate ALO

PM -> SO : onPlayerDisconnected(playerId)
activate SO
note right of SO
  Print final statistics:
  - Total movements
  - Distance traveled
  - Area transitions
end note
SO --> PM
deactivate SO

PM -> CO : onPlayerDisconnected(playerId)
activate CO
note right of CO
  Broadcast disconnect
  message to chat
end note
CO -> Network : sendPacketToAllClients(chat)
activate Network
Network --> CO
deactivate Network
CO --> PM
deactivate CO

deactivate PM

note over PM
  Cleanup:
  - Save player data
  - Remove from world
  - Unregister observers
end note

deactivate PM
destroy PM

== Pattern Advantages Demonstrated ==

note across
  **Key Observations:**
  
  1. **Single Notification â†’ Multiple Actions**
     - One notifyPositionChanged() call triggers 4 different observers
     - Each observer performs its own specific responsibility
  
  2. **Loose Coupling**
     - PlayerManager doesn't know observer implementation details
     - Observers can be added/removed without changing PlayerManager
  
  3. **Parallel Responsibilities**
     - Network sync happens independently of statistics tracking
     - Area loading happens independently of chat notifications
  
  4. **Easy Extension**
     - Want to add achievements? Create AchievementObserver
     - Want to add replay recording? Create ReplayObserver
     - No changes needed to PlayerManager!
end note

@enduml
