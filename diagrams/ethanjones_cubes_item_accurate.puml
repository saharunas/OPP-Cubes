@startuml Item_System
!theme plain
title Item System

    class Item {
        +id : String
        +intID : int
        #texture : TextureRegion
        ~texture : return
        ~s : String
        ~false : return
        ~64 : return
        ~id : return
        --
        ~IllegalArgumentException(format" : id + " is not in the correct) : throw new
        ~loadGraphics() : public void
        ~getTextureRegion(meta : int) : public TextureRegion
        ~getName(meta : int) : public String
        ~onButtonPress(type : ClickType, itemStack : ItemStack, player : Player, stack : int) : public boolean
        ~getStackCountMax() : public int
        ~toString() : Override public String
    }
    class ItemBlock {
        ~{readonly} block : Block
        ~icon : TextureRegion
        ~blockIntersection : BlockIntersection
        ~blockReference : BlockReference
        ~false : return
        ~meta : Integer
        ~event : PlayerPlaceBlockEvent
        ~true : return
        ~false : return
        --
        ~super() : void
        ~loadGraphics() : public void
        ~getTextureRegion(meta : int) : Override public TextureRegion
        ~getName(meta : int) : Override public String
        ~onButtonPress(type : ClickType, itemStack : ItemStack, player : Player, stack : int) : Override public boolean
        ~PlayerPlaceBlockEvent() : new
    }
    class ItemJson {
        ~id : String
        ~item : JItem
        ~prop : JsonValue
        ~id : String
        ~item : JItemTool
        ~tool : JsonObject
        ~prop : JsonValue
        #textureString : String
        #textureString : String
        --
        ~json(json : JsonArray) : public static void
        ~for(json : JsonValue value :) : void
        ~addItem(json : JsonObject) : public static void
        ~addItemTool() : void
        ~JsonException(id" : "No item) : throw new
        ~JItem() : new
        ~if(null : prop !=) : void
        ~for(json : JsonObject.Member member :) : void
        ~addItemTool(json : JsonObject) : public static void
        ~JsonException(id" : "No item) : throw new
        ~JItemTool() : new
        ~for(tool : JsonObject.Member member :) : void
        ~if(null : prop !=) : void
        ~for(json : JsonObject.Member member :) : void
        ~toolType(s : String) : public static ItemTool.ToolType
        +... (more methods)
    }
    class JItem {
        #textureString : String
        --
        ~super() : void
        ~loadGraphics() : Override public void
    }
    class JItemTool {
        #textureString : String
        --
        ~super() : void
        ~loadGraphics() : Override public void
        ~setToolType(type : ToolType) : protected void
        ~setToolLevel(level : int) : protected void
    }
    class Items {
        ~{static} pickaxe : ItemTool
        ~{static} axe : ItemTool
        ~{static} shovel : ItemTool
    }
    class ItemStack {
        +item : Item
        +count : int
        +meta : int
        ~dataGroup : DataGroup
        ~dataGroup : return
        ~stack : ItemStack
        ~null : return
        ~stack : return
        --
        ~write() : Override public DataGroup
        ~DataGroup() : new
        ~read(dataGroup : DataGroup) : Override public void
        ~copy() : public ItemStack
        ~readItemStack(dataGroup : DataGroup) : public static ItemStack
        ~if(null : stack.item ==) : void
        ~getTextureRegion() : public TextureRegion
        ~getName() : public String
    }
    class ItemTool {
        +time : float
        +totalTime : float
        +target : BlockReference
        ~itemStack : ItemStack
        #toolType : ToolType
        #toolLevel : int
        ~toolType : return
        ~toolLevel : return
        ~1 : return
        ~itemStack : ItemStack
        ~blockIntersection : BlockIntersection
        ~blockReference : BlockReference
        ~block : Block
        ~meta : int
        ~target : MiningTarget
        ~event : PlayerBreakBlockEvent
        --
        ~super() : void
        ~getToolType() : public ToolType
        ~getToolLevel() : public int
        ~getStackCountMax() : Override public int
        ~mine(player : Player, mine : boolean) : public static void
        ~if() : void
        ~if(null : blockIntersection !=) : void
        ~if(null : block !=) : void
        ~MiningTarget() : new
        ~if() : void
        ~PlayerBreakBlockEvent() : new
    }
    enum ToolType {
    }
    class MiningTarget {
        +time : float
        +totalTime : float
        +target : BlockReference
        ~itemStack : ItemStack
    }
    Item <|-- ItemBlock
    Item <|-- JItem
    ItemTool <|-- JItemTool
    DataParser <|.. ItemStack
    Item <|-- ItemTool
@enduml
