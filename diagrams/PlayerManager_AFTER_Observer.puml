@startuml PlayerManager_AFTER_Observer

' ===================================================================
' AFTER: PlayerManager WITH Observer Pattern (Loose Coupling)
' ===================================================================

skinparam classAttributeIconSize 0
skinparam backgroundColor #FFFFFF
skinparam class {
    BackgroundColor<<Subject>> #CCFFEE
    BackgroundColor<<Observer>> #CCFFCC
    BackgroundColor #FFEECC
    BorderColor #000000
    ArrowColor #000000
    FontSize 12
}

' Main PlayerManager class (AFTER - Observer Pattern)
class PlayerManager <<Subject>> {
    + client : ClientIdentifier
    + connectionPing : double
    + lastPingNano : double
    - server : CubesServer
    - playerArea : AreaReference
    - renderDistance : int
    - loadDistance : int
    + clickType : ClickType
    **- observers : List<PlayerStateObserver>**
    ..
    + PlayerManager(client : ClientIdentifier, packet : PacketConnect)
    **+ registerObserver(observer : PlayerStateObserver) : void**
    **+ unregisterObserver(observer : PlayerStateObserver) : void**
    **- notifyPositionChanged(oldPos : Vector3, newPos : Vector3) : void**
    **- notifyAreaChanged(oldArea : AreaReference, newArea : AreaReference) : void**
    **- notifyPlayerDisconnected() : void**
    ..
    + setPosition(newPos : Vector3, newAngle : Vector3, clientKnows : boolean) : void
    + disconnected() : void
    + update() : void
}

note right of PlayerManager
  **AFTER: Observer Pattern (Subject)**
  
  Key Features:
  + Maintains list of observers
  + registerObserver() / unregisterObserver()
  + notify*() methods for each event
  + Loose coupling
  + Observers handle specific concerns
  + Easy to add new observers
  + Can enable/disable per player
end note

' Observer Interface
interface PlayerStateObserver <<Observer>> {
    {abstract} + onPositionChanged(playerId : String, oldPos : Vector3, newPos : Vector3) : void
    {abstract} + onAreaChanged(playerId : String, oldArea : AreaReference, newArea : AreaReference) : void
    {abstract} + onPlayerDisconnected(playerId : String) : void
}

note top of PlayerStateObserver
  **Observer Interface**
  Defines contract for all observers.
  Each method corresponds to a
  different player state change.
end note

' Concrete Observers
class NetworkObserver <<Observer>> {
    - client : ClientIdentifier
    + NetworkObserver(client : ClientIdentifier)
    + onPositionChanged(playerId : String, oldPos : Vector3, newPos : Vector3) : void
    + onAreaChanged(playerId : String, oldArea : AreaReference, newArea : AreaReference) : void
    + onPlayerDisconnected(playerId : String) : void
}

class AreaLoadObserver <<Observer>> {
    - client : ClientIdentifier
    - loadDistance : int
    - currentArea : AreaReference
    + AreaLoadObserver(client : ClientIdentifier, loadDistance : int)
    + onPositionChanged(playerId : String, oldPos : Vector3, newPos : Vector3) : void
    + onAreaChanged(playerId : String, oldArea : AreaReference, newArea : AreaReference) : void
    + onPlayerDisconnected(playerId : String) : void
}

class StatisticsObserver <<Observer>> {
    - client : ClientIdentifier
    - totalMovementCount : long
    - totalDistanceTraveled : double
    - areaChangeCount : long
    + StatisticsObserver(client : ClientIdentifier)
    + onPositionChanged(playerId : String, oldPos : Vector3, newPos : Vector3) : void
    + onAreaChanged(playerId : String, oldArea : AreaReference, newArea : AreaReference) : void
    + onPlayerDisconnected(playerId : String) : void
    + getTotalMovementCount() : long
    + getTotalDistanceTraveled() : double
}

class ChatObserver <<Observer>> {
    - client : ClientIdentifier
    - notifyAreaChanges : boolean
    + ChatObserver(client : ClientIdentifier, notify : boolean)
    + onPositionChanged(playerId : String, oldPos : Vector3, newPos : Vector3) : void
    + onAreaChanged(playerId : String, oldArea : AreaReference, newArea : AreaReference) : void
    + onPlayerDisconnected(playerId : String) : void
    + setNotifyAreaChanges(notify : boolean) : void
}

' Supporting classes
class ClientIdentifier {
    - socketMonitor : SocketMonitor
    - player : Player
    - playerManager : PlayerManager
    + getPlayer() : Player
    + getSocketMonitor() : SocketMonitor
}

class Player {
    + username : String
    + uuid : UUID
    + position : Vector3
    + angle : Vector3
}

class AreaReference {
    + areaX : int
    + areaZ : int
    + equals(other : Object) : boolean
}

' Relationships

' Observer Pattern Core Relationships
PlayerManager o-- PlayerStateObserver : observers >
PlayerStateObserver <|.. NetworkObserver : implements
PlayerStateObserver <|.. AreaLoadObserver : implements
PlayerStateObserver <|.. StatisticsObserver : implements
PlayerStateObserver <|.. ChatObserver : implements

' Associations
PlayerManager -- ClientIdentifier : has >
NetworkObserver -- ClientIdentifier : uses >
AreaLoadObserver -- ClientIdentifier : uses >
StatisticsObserver -- ClientIdentifier : uses >
ChatObserver -- ClientIdentifier : uses >
ClientIdentifier -- Player : manages >

' Layout hints
PlayerManager -[hidden]down-> PlayerStateObserver
NetworkObserver -[hidden]right-> AreaLoadObserver
AreaLoadObserver -[hidden]right-> StatisticsObserver
StatisticsObserver -[hidden]right-> ChatObserver

note bottom of PlayerManager
  **setPosition() Method - NOW CLEAN:**
  
  public void setPosition(Vector3 newPos, ...) {
    Vector3 oldPos = client.getPlayer().position.cpy();
    
    // 1. Update position
    client.getPlayer().position.set(newPosition);
    
    // 2. CLEAN: Notify all observers
    notifyPositionChanged(oldPos, newPosition);
    
    // 3. If area changed, notify that too
    if (areaChanged) {
      notifyAreaChanged(oldArea, newArea);
    }
  }
  
  **Advantages:**
  + Single Responsibility - just manages state & notifies
  + Open/Closed - add observers without changing PlayerManager
  + Each observer handles ONE concern
  + Easy to test observers independently
  + Can enable/disable observers per player
end note

note bottom of NetworkObserver
  **Concrete Observer 1**
  
  Responsibility: Network Synchronization
  
  onPositionChanged():
    - Broadcasts player position
      to other clients
    - Uses NetworkingManager
  
  Handles ONLY networking!
end note

note bottom of AreaLoadObserver
  **Concrete Observer 2**
  
  Responsibility: World Streaming
  
  onAreaChanged():
    - Calculates which areas to load
    - Requests new chunks from world
    - Sends entities to client
  
  Handles ONLY area loading!
end note

note bottom of StatisticsObserver
  **Concrete Observer 3**
  
  Responsibility: Player Metrics
  
  onPositionChanged():
    - Increments movement counter
    - Tracks distance traveled
  
  onPlayerDisconnected():
    - Prints final statistics
  
  Handles ONLY statistics!
end note

note bottom of ChatObserver
  **Concrete Observer 4**
  
  Responsibility: Chat Notifications
  
  onAreaChanged():
    - Broadcasts area entry message
      (if enabled)
  
  onPlayerDisconnected():
    - Broadcasts disconnect message
  
  Handles ONLY chat events!
end note


@enduml
