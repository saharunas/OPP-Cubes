@startuml PlayerManager_BEFORE_Observer

' ===================================================================
' BEFORE: PlayerManager WITHOUT Observer Pattern (Tight Coupling)
' ===================================================================

skinparam classAttributeIconSize 0
skinparam backgroundColor #FFFFFF
skinparam class {
    BackgroundColor #FFEECC
    BorderColor #000000
    ArrowColor #000000
    FontSize 12
}

' Main PlayerManager class (BEFORE - No Observer Pattern)
class PlayerManager {
    + client : ClientIdentifier
    + connectionPing : double
    + lastPingNano : double
    - server : CubesServer
    - playerArea : AreaReference
    - initialGenerationTask : GenerationTask
    - renderDistance : int
    - loadDistance : int
    + clickType : ClickType
    - lastSentRainStatus : RainStatus
    ..
    + PlayerManager(client : ClientIdentifier, packet : PacketConnect)
    + handlePacket(packet : PacketPlayerMovement) : void
    + setPosition(newPos : Vector3, newAngle : Vector3, clientKnows : boolean) : void
    + teleportToSpawn() : void
    + sendArea(area : Area) : void
    + disconnected() : void
    + update() : void
    + positionInLoadRange(position : Vector3) : boolean
    + areaInLoadRange(area : AreaReference) : boolean
    - initialLoadAreas() : void
}

note right of PlayerManager
  **BEFORE: No Observer Pattern**
  
  Problems:
  - Tight coupling to NetworkingManager
  - Tight coupling to World system
  - Hard to add new features
  - setPosition() does EVERYTHING
  - No separation of concerns
  - Hard to test individual features
  - Cannot disable features per player
end note

' Supporting classes
class ClientIdentifier {
    - socketMonitor : SocketMonitor
    - player : Player
    - playerManager : PlayerManager
    + getPlayer() : Player
    + getSocketMonitor() : SocketMonitor
    + getPlayerManager() : PlayerManager
}

class Player {
    + username : String
    + uuid : UUID
    + position : Vector3
    + angle : Vector3
    + getInventory() : Inventory
    + addToWorld() : void
}

class AreaReference {
    + areaX : int
    + areaZ : int
    + set(x : int, z : int) : AreaReference
    + setFromPositionVector3(pos : Vector3) : AreaReference
    + equals(other : Object) : boolean
}

class CubesServer {
    + world : WorldServer
    + getAllClients() : List<ClientIdentifier>
}

class NetworkingManager {
    {static} + sendPacketToClient(packet : Packet, client : ClientIdentifier) : void
    {static} + sendPacketToAllClients(packet : Packet) : void
    {static} + sendPacketToOtherClients(packet : Packet, exclude : ClientIdentifier) : void
}

class WorldServer {
    + getArea(ref : AreaReference, request : boolean) : Area
    + requestRegion(region : WorldRegion, param : WorldRequestParameter) : GenerationTask
    + getSpawnPoint() : BlockReference
    + getRainStatus(x : float, z : float) : RainStatus
    + removeLoadedAreaFilter(player : Player) : void
}

class Area {
    + areaX : int
    + areaZ : int
    + featuresGenerated() : boolean
    {static} + isShared() : boolean
}

' Relationships

' Associations
PlayerManager -- ClientIdentifier : has >
PlayerManager -- CubesServer : uses >
PlayerManager -- AreaReference : tracks >
ClientIdentifier -- Player : manages >

' Dependencies (TIGHT COUPLING!)
PlayerManager ..> NetworkingManager : << hardcoded calls >>\nsendPacketToClient()\nsendPacketToOtherClients()
PlayerManager ..> WorldServer : << hardcoded calls >>\ngetArea()\nrequestRegion()
PlayerManager ..> Area : << uses >>\nfeaturesGenerated()

note bottom of PlayerManager
  **setPosition() Method - DOES EVERYTHING:**
  
  public void setPosition(Vector3 newPos, ...) {
    // 1. Update position
    client.getPlayer().position.set(newPosition);
    
    // 2. HARDCODED: Network broadcasting
    NetworkingManager.sendPacketToOtherClients(...);
    
    // 3. HARDCODED: Area loading
    server.world.requestRegion(difference, null);
    
    // 4. HARDCODED: Entity synchronization
    // Send new entities to client
    
    // Want to add statistics? MUST MODIFY THIS METHOD!
    // Want to add achievements? MUST MODIFY THIS METHOD!
    // Want to add replay recording? MUST MODIFY THIS METHOD!
  }
  
  **Problems:**
  - Violates Single Responsibility Principle
  - Violates Open/Closed Principle
  - Hard to test individual concerns
  - Cannot enable/disable features per player
  - Adding features requires modifying PlayerManager
end note


@enduml
